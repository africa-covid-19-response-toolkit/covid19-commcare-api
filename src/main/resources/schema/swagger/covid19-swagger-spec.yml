swagger: '2.0'
info:
  version: 0.0.1
  title:  Covid19-case-follow-up
  description: ''
host: 'localhost:8080'
basePath: /
securityDefinitions:
  basicAuth:
    type: basic
schemes:
  - http
tags:
  - name: Case
    description: 'Case Registration'
  - name: Questionnier
    description: 'Questionniers to be filled'
paths:
  '/v1/case':
      put:
        operationId: registerNewCase
        summary: 'Register new case'
        tags:
        - Case
        consumes:
        - application/json
        parameters:
          - name: caseData
            in: body
            schema:
              $ref: '#/definitions/request-save-case'
        responses:
          '200':
            description: ''
            schema:
              $ref: '#/definitions/response-base'
          '401':
            $ref: '#/responses/response-unauthorized'
          '500':
            $ref: '#/responses/response-internal-server-error-500'
      get:
        operationId: getCase
        summary: Get case
        tags:
        - Case
        produces:
        - application/json
        parameters:
          - $ref: '#/parameters/case-code-in-query'
        responses:
          '200':
            description: ''
            schema:
              $ref: '#/definitions/response-case-single'
  '/v1/case/{code}/update-result':
      post:
        operationId: updateResult
        summary: 'Update case result'
        tags:
        - Case
        consumes:
        - application/json
        parameters:
          - $ref: '#/parameters/case-code-in-path'
          - $ref: '#/parameters/confirmed-result'
        responses:
          '200':
            description: ''
            schema:
              $ref: '#/definitions/response-base'
          '401':
            $ref: '#/responses/response-unauthorized'
          '500':
            $ref: '#/responses/response-internal-server-error-500'
  '/v1/questionnier':
      put:
        operationId: registerNewQuestionnier
        summary: 'Register new questionnier'
        tags:
        - Questionnier
        consumes:
        - application/json
        parameters:
          - name: qData
            in: body
            schema:
              $ref: '#/definitions/request-save-questionnier'
        responses:
          '200':
            description: ''
            schema:
              $ref: '#/definitions/response-base'
          '401':
            $ref: '#/responses/response-unauthorized'
          '500':
            $ref: '#/responses/response-internal-server-error-500'
      get:
        operationId: getQuestionnier
        summary: Get Questionnier
        tags:
        - Questionnier
        produces:
        - application/json
        parameters:
          - $ref: '#/parameters/question-id-in-path'
        responses:
          '200':
            description: ''
            schema:
              $ref: '#/definitions/response-questionnier-single'
parameters:
  case-code-in-query:
    in: query
    name: code
    type: string
    format: uuid
    required: true
  case-code-in-path:
    in: path
    name: code
    type: string
    format: uuid
    required: true
  confirmed-result:
    in: body
    name: confirmedResult
    schema:
      type: integer
      format: int32
    required: true
  question-id-in-path:
    in: path
    name: id
    type: integer
    format: int32
    required: true
definitions:
    response-base:
      type: object
      properties:
        success:
          type: boolean
        resultCode:
          type: integer
          format: int32
        message:
          type: string
        errors:
          type: array
          items:
            type: string
        transactionId:
          type: string
        type:
          type: string
      discriminator: type
      required:
        - success
        - resultCode
    model-case:
      type: object
      properties:
        id:
          type: integer
          format: int32
        caseCode:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        dob:
          type: string
          format: date
        gender:
          type: string
          enum: 
          - F
          - M
        occupation:
          type: string
        passportNumber:
          type: string
        incidentContactPhone1:
          type: string
        incidentContactPhone2:
          type: string
        countryOfResidence:
          type: string
        countryOfOrigin:
          type: string
        nationality:
          type: string
        region:
          type: string
        subcityOrZone:
          type: string
        woreda:
          type: string
        kebele:
          type: string
        houseNo:
          type: string
        phoneNo:
          type: string
        latitude:
          type: string
        presumptiveResult:
          type: integer
          format: int32
        confirmedResult:
          type: integer
          format: int32
        identifiedBy:
          type: integer
          format: int32
        parent_case_code:
          type: string
        travelIistoryId:
          type: string
        modifiedBy:
          type: string
        reportingDate:
          type: string
          format: date-time
        modifiedDate:
          type: string
          format: date-time
      required:
        - firstName
        - lastName
        - passportNumber
        - incidentContactPhone1
        - countryOfResidence
        - identifiedBy
        - modifiedBy
    model-questionnier:
      type: object
      properties:
        id:
          type: integer
          format: int32
        question:
          type: string
        options:
          description: Should be a valid json data
          type: string
        category:
          type: string
        parentId:
          type: integer
          format: int32
        description:
          type: string
        insertDate:
          type: string
          format: date-time
        modifiedDate:
          type: string
          format: date-time
      required:
        - question
        - options
        - category
    model-questionnier-list:
      type: object
      properties:
        cases:
          type: array
          items: 
            $ref: '#/definitions/model-questionnier'
    model-case-list:
      type: object
      properties:
        cases:
          type: array
          items: 
            $ref: '#/definitions/model-case'
    request-save-case:
      allOf:
        - $ref: '#/definitions/model-case'
    request-save-questionnier:
      allOf:
        - $ref: '#/definitions/model-questionnier'
    response-case-single:
      allOf:
        - $ref: '#/definitions/response-base'
        - type: object
          properties:
            returnValue:
              $ref: '#/definitions/model-case'
    response-case-list:
      allOf:
        - $ref: '#/definitions/response-base'
        - type: object
          properties:
            returnValue:
              $ref: '#/definitions/model-case-list'
    response-questionnier-single:
      allOf:
        - $ref: '#/definitions/model-questionnier'
    response-questionnier-list:
      allOf:
        - $ref: '#/definitions/response-base'
        - type: object
          properties:
            returnValue:
              $ref: '#/definitions/model-questionnier-list'
responses:
    response-internal-server-error-500:
      description: Internal Server error
      schema:
        $ref: '#/definitions/response-base'
    response-unauthorized:
        description: Authentication information is missing or invalid
        schema:
          $ref: '#/definitions/response-base' 
        headers:
          WWW_Authenticate:
            type: string